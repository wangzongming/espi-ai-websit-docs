import{_ as r,r as i,c as p,d as a,w as s,b as n,a as l,o as c,e}from"./app-ABaH--xM.js";const u={},h=l(`<h1 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start"><span>Quick Start</span></a></h1><h2 id="what-is-esp-ai" tabindex="-1"><a class="header-anchor" href="#what-is-esp-ai"><span>What is ESP-AI?</span></a></h2><p><code>ESP-AI</code> provides a complete AI conversation solution for your development board, including but not limited to the <code>IAT(ASR)+LLM+TTS</code> integration solution for the <code>ESP32</code> series development boards. It is dependency injected into the project without affecting existing projects.</p><p>Why say it includes but is not limited to <code>ESP32</code> development boards? Because even if your other development board uses a different one, you can still use <code>ESP32</code> to build an <code>AI</code> service based on this project and use serial communication to send instructions or dialogues to your other development board.</p><h2 id="what-can-esp-ai-do" tabindex="-1"><a class="header-anchor" href="#what-can-esp-ai-do"><span>What can ESP-AI do?</span></a></h2><p>Imagine a scenario where you have a robot that can perform some fixed actions, but you want to communicate with it and let it understand some of your commands. If you start implementing this process from scratch, you will start by collecting the audio stream from the microphone and then enter into endless debugging...</p><p>Now with <code>ESP-AI</code>, you don&#39;t have to do that. You just need to introduce <code>ESP-AI</code>. It has already implemented processes for <strong>offline voice wake-up, voice recognition, large language model invocation, text-to-speech, and speaker audio output</strong>. Moreover, <code>ESP-AI</code> uses a plug-in design framework, and each of the above steps provides extension methods so you can customize your product at will.</p><h2 id="esp-ai-technology-stack" tabindex="-1"><a class="header-anchor" href="#esp-ai-technology-stack"><span>ESP-AI Technology Stack</span></a></h2><ul><li><p><strong>Software</strong>: The server-side code of this project is based on <code>Nodejs</code>, and the hardware code is based on <code>Arduino</code>. Although the server-side is developed based on <code>Nodejs</code>, it also provides plugins written in other programming languages. For details, see the plugin development section.</p></li><li><p><strong>Hardware</strong>: This project mainly runs on the <code>ESP</code> series of development boards.</p></li></ul><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features"><span>Features</span></a></h2><ul><li>‚úîÔ∏è Customizable offline voice wake-up</li><li>‚úîÔ∏è IAT(ASR) ‚û°Ô∏è LLM/RAG ‚û°Ô∏è TTS</li><li>‚úîÔ∏è Configurable</li><li>‚úîÔ∏è Plugin-based</li><li>‚úîÔ∏è Ready to use</li></ul><h2 id="next-steps" tabindex="-1"><a class="header-anchor" href="#next-steps"><span>Next Steps</span></a></h2><ul><li>ü§î Provide a no-code access solution</li><li>ü§î Integrate AI into user intent inference (e.g., &quot;turn off the light&quot; and &quot;quickly turn on the light&quot; will both be recognized as the &quot;turn on the light&quot; command)</li><li>ü§î Offer free and paid services</li><li>ü§î Online generation of wake words</li><li>ü§î Methods for writing plugins in other languages (to avoid only using Node.js to develop plugins)</li><li>ü§î Provide a dedicated development board (to avoid current complex wiring)</li></ul><h2 id="development-environment-setup" tabindex="-1"><a class="header-anchor" href="#development-environment-setup"><span>Development Environment Setup</span></a></h2><h3 id="local-development-environment-setup" tabindex="-1"><a class="header-anchor" href="#local-development-environment-setup"><span>Local Development Environment Setup</span></a></h3><p>For future upgrades, simply download the relevant files from the <a href="https://github.com/wangzongming/esp-ai/releases" target="_blank" rel="noopener noreferrer">release page</a>. The dependencies below only need to be installed once.</p><p>No <code>Nodejs</code> environment is required when installing the server using a Docker image or a Windows lazy package.</p><table><thead><tr><th>Environment</th><th>Version</th><th>Note</th></tr></thead><tbody><tr><td><code>Nodejs</code></td><td>&gt;= v18.x</td><td>npm version needs to be below 10.x; 6.x to 9.x are fine</td></tr><tr><td><code>VsCode IDE</code></td><td>Latest</td><td></td></tr><tr><td><code>Arduino IDE</code></td><td>&gt;= v2.x</td><td></td></tr><tr><td><code>ESP</code> Board</td><td>v2.x</td><td>Search and install the <code>ESP</code> board in <code>Arduino IDE</code></td></tr><tr><td>Hardware Code Libraries</td><td>Latest</td><td>Import plugins from <code>/client/libraries</code> in the GitHub repository into the IDE&#39;s plugins. Default location is <code>C:\\Users\\Username\\Documents\\Arduino\\libraries</code></td></tr></tbody></table><h4 id="hardware-code-library-explanation" tabindex="-1"><a class="header-anchor" href="#hardware-code-library-explanation"><span>Hardware Code Library Explanation</span></a></h4><table><thead><tr><th>Filename</th><th>Note</th><th>Version</th></tr></thead><tbody><tr><td>arduino-audio-tool</td><td>https://github.com/pschatzmann/arduino-audio-tools</td><td></td></tr><tr><td>WebSockets</td><td>New version IDE can search and install directly</td><td>v2.4.0</td></tr><tr><td>Arduino_JSON</td><td>New version IDE can search and install directly</td><td>v0.2.0</td></tr><tr><td>esp-ai</td><td>ESP-AI temporarily unavailable for search and installation</td><td></td></tr><tr><td>xiao_ming_tong_xue_inferencing</td><td>Offline voice recognition model temporarily unavailable for search and installation</td><td></td></tr></tbody></table><h3 id="applying-for-an-iflytek-key" tabindex="-1"><a class="header-anchor" href="#applying-for-an-iflytek-key"><span>Applying for an iFLYTEK Key</span></a></h3><p>Registration URL: https://console.xfyun.cn/services/iat</p><p><code>ESP-AI</code> fully integrates with iFLYTEK&#39;s <code>IAT</code>, <code>LLM</code>, and <code>TTS</code> services, so you can test using iFLYTEK&#39;s services before using your own.</p><h2 id="client" tabindex="-1"><a class="header-anchor" href="#client"><span>Client</span></a></h2><p>The hardware end is referred to as the client.</p><h3 id="hardware-code-arduino" tabindex="-1"><a class="header-anchor" href="#hardware-code-arduino"><span>Hardware Code - Arduino</span></a></h3><ol><li>Create a file <code>example/example.ino</code>. Note: The file must be placed in a folder, and the folder name must be the same as the file name.</li><li>Open the <code>example.ino</code> file with <code>Arduino IDE</code>.</li><li>Write the following code and upload it to the development board.</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;esp-ai.h&gt;</span></span></span>
<span class="line"></span>
<span class="line">ESP_AI esp_ai<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Required] Debug mode, will output more information</span></span>
<span class="line">bool debug <span class="token operator">=</span> true<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Required] WiFi configuration: { wifi SSID, wifi password } Note: Use double quotes!</span></span>
<span class="line">ESP_AI_wifi_config wifi_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;oldwang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oldwang520&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Required] Service configuration: { service IP, service port }</span></span>
<span class="line">ESP_AI_server_config server_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;192.168.1.5&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Required] Offline wake-up solution: { solution, recognition threshold }, &quot;edge_impulse&quot; | &quot;diy&quot;, for &quot;diy&quot; you can call the esp_ai.wakeUp() method to wake up</span></span>
<span class="line">ESP_AI_wake_up_config wake_up_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;edge_impulse&quot;</span><span class="token punctuation">,</span> <span class="token number">0.7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// [Optional] Microphone pin configuration: { bck_io_num, ws_io_num, data_in_num }</span></span>
<span class="line">ESP_AI_i2s_config_mic i2s_config_mic <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Optional] Speaker pin configuration: { bck_io_num, ws_io_num, data_in_num, sample rate }</span></span>
<span class="line">ESP_AI_i2s_config_speaker i2s_config_speaker <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [Optional] Volume control configuration: { input pin, input max value (1024|4096), default volume (0-1) }</span></span>
<span class="line">ESP_AI_volume_config volume_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// Start running ESP-AI</span></span>
<span class="line">  esp_ai<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> i2s_config_mic<span class="token punctuation">,</span> i2s_config_speaker<span class="token punctuation">,</span> wifi_config<span class="token punctuation">,</span> server_config<span class="token punctuation">,</span> wake_up_config<span class="token punctuation">,</span> volume_config<span class="token punctuation">,</span> debug <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  esp_ai<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="hardware-code-idf" tabindex="-1"><a class="header-anchor" href="#hardware-code-idf"><span>Hardware Code - IDF</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">// Under development...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="hardware-materials" tabindex="-1"><a class="header-anchor" href="#hardware-materials"><span>Hardware Materials</span></a></h3><table><thead><tr><th>Hardware</th><th>Quantity</th><th>Price</th></tr></thead><tbody><tr><td>esp32s3(N16R8)</td><td>1</td><td>25</td></tr><tr><td>INMP441</td><td>1</td><td>8</td></tr><tr><td>Max98357A</td><td>1</td><td>5</td></tr><tr><td>LED</td><td>1</td><td>0.5</td></tr><tr><td>Small speaker</td><td>1</td><td>6</td></tr><tr><td>Breadboard</td><td>1</td><td>5</td></tr><tr><td>Dupont wires</td><td>Some</td><td>1</td></tr></tbody></table><h3 id="hardware-wiring-esp32-s3" tabindex="-1"><a class="header-anchor" href="#hardware-wiring-esp32-s3"><span>Hardware Wiring - ESP32-S3</span></a></h3><table><thead><tr><th>ESP32-s3</th><th>INMP441</th><th>Max98357A</th><th>Potentiometer (optional)</th><th>LED (optional)</th></tr></thead><tbody><tr><td>3v3</td><td>VDD</td><td>VDD</td><td>VDD</td><td></td></tr><tr><td>GND</td><td>GND</td><td>GND</td><td>GND</td><td>GND</td></tr><tr><td>GND</td><td>L/R</td><td></td><td></td><td></td></tr><tr><td>4</td><td>SCK</td><td></td><td></td><td></td></tr><tr><td>5</td><td>WS</td><td></td><td></td><td></td></tr><tr><td>6</td><td>SD</td><td></td><td></td><td></td></tr><tr><td>15</td><td></td><td>DIN</td><td></td><td></td></tr><tr><td>16</td><td></td><td>BCLK</td><td></td><td></td></tr><tr><td>17</td><td></td><td>LRC</td><td></td><td></td></tr><tr><td>34/35</td><td></td><td></td><td>OUT</td><td></td></tr><tr><td>18</td><td></td><td></td><td></td><td>Positive</td></tr></tbody></table><p>Wiring diagram to be added...</p><h3 id="hardware-wiring-xiaoesp32s3" tabindex="-1"><a class="header-anchor" href="#hardware-wiring-xiaoesp32s3"><span>Hardware Wiring - XIAOESP32S3</span></a></h3><p>Under development...</p><h3 id="hardware-wiring-nodemcu32s" tabindex="-1"><a class="header-anchor" href="#hardware-wiring-nodemcu32s"><span>Hardware Wiring - nodemcu32s</span></a></h3><p>Under development...</p><h2 id="server" tabindex="-1"><a class="header-anchor" href="#server"><span>Server</span></a></h2><p>The server provides services to the hardware (client), used to call <code>LLM</code>, <code>IAT</code>, <code>TTS</code>, etc., and can conveniently provide extensions. The server and client have a one-to-many relationship, meaning one server can serve multiple clients.</p><h3 id="server-code-node-js" tabindex="-1"><a class="header-anchor" href="#server-code-node-js"><span>Server Code - Node.js</span></a></h3><ol><li>In the previously created <code>example</code> directory, create a file <code>index.js</code>.</li><li>Add the following code to <code>index.js</code>:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> espAi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;esp-ai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token literal-property property">api_key</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// iFLYTEK: https://console.xfyun.cn/services/iat. Open the URL and copy the three fields in the upper right corner.</span></span>
<span class="line">        <span class="token literal-property property">xun_fei</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">appid</span><span class="token operator">:</span> <span class="token string">&quot;5200d300&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">apiSecret</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">apiKey</span><span class="token operator">:</span> <span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">llm</span><span class="token operator">:</span> <span class="token string">&quot;v4.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">espAi</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Install server dependencies</li></ol>`,45),m=n("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text","data-title":"text"},[n("pre",{class:"language-text"},[n("code",null,[n("span",{class:"line"}),e(`
`),n("span",{class:"line"},"bash:no-line-numbers"),e(`
`),n("span",{class:"line"},"yarn add esp-ai"),e(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=n("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"npm"),e(),n("span",{class:"token function"},"install"),e(" esp-ai")]),e(`
`),n("span",{class:"line"})])])],-1),k=n("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"pnpm"),e(),n("span",{class:"token function"},"install"),e(" esp-ai")]),e(`
`),n("span",{class:"line"})])])],-1),g=l(`<ol start="4"><li>Run the server</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"># For production environments, use pm2 to run the service to ensure reliability and performance: pm2 start ./index.js -i max </span>
<span class="line">node ./index.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-installation" tabindex="-1"><a class="header-anchor" href="#docker-installation"><span>Docker Installation</span></a></h3><p>Under implementation...</p><h3 id="lazy-package" tabindex="-1"><a class="header-anchor" href="#lazy-package"><span>Lazy Package</span></a></h3><p>Under implementation...</p><h2 id="detailed-documentation" tabindex="-1"><a class="header-anchor" href="#detailed-documentation"><span>Detailed Documentation</span></a></h2>`,7),b=n("h2",{id:"finally",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#finally"},[n("span",null,"Finally")])],-1),f=n("p",null,'Shout "Xiao Ming classmate" and you can chat with it happily! üéâ',-1);function w(y,_){const t=i("CodeGroupItem"),d=i("CodeGroup"),o=i("RouteLink");return c(),p("div",null,[h,a(d,null,{default:s(()=>[a(t,{title:"yarn"},{default:s(()=>[m]),_:1}),a(t,{title:"npm",active:""},{default:s(()=>[v]),_:1}),a(t,{title:"pnpm"},{default:s(()=>[k]),_:1})]),_:1}),g,n("ul",null,[n("li",null,[a(o,{to:"/en/client.html"},{default:s(()=>[e("Client Detailed Documentation")]),_:1})]),n("li",null,[a(o,{to:"/en/server.html"},{default:s(()=>[e("Server Detailed Documentation")]),_:1})])]),b,f])}const S=r(u,[["render",w],["__file","start.html.vue"]]),I=JSON.parse('{"path":"/en/start.html","title":"Quick Start","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"What is ESP-AI?","slug":"what-is-esp-ai","link":"#what-is-esp-ai","children":[]},{"level":2,"title":"What can ESP-AI do?","slug":"what-can-esp-ai-do","link":"#what-can-esp-ai-do","children":[]},{"level":2,"title":"ESP-AI Technology Stack","slug":"esp-ai-technology-stack","link":"#esp-ai-technology-stack","children":[]},{"level":2,"title":"Features","slug":"features","link":"#features","children":[]},{"level":2,"title":"Next Steps","slug":"next-steps","link":"#next-steps","children":[]},{"level":2,"title":"Development Environment Setup","slug":"development-environment-setup","link":"#development-environment-setup","children":[{"level":3,"title":"Local Development Environment Setup","slug":"local-development-environment-setup","link":"#local-development-environment-setup","children":[]},{"level":3,"title":"Applying for an iFLYTEK Key","slug":"applying-for-an-iflytek-key","link":"#applying-for-an-iflytek-key","children":[]}]},{"level":2,"title":"Client","slug":"client","link":"#client","children":[{"level":3,"title":"Hardware Code - Arduino","slug":"hardware-code-arduino","link":"#hardware-code-arduino","children":[]},{"level":3,"title":"Hardware Code - IDF","slug":"hardware-code-idf","link":"#hardware-code-idf","children":[]},{"level":3,"title":"Hardware Materials","slug":"hardware-materials","link":"#hardware-materials","children":[]},{"level":3,"title":"Hardware Wiring - ESP32-S3","slug":"hardware-wiring-esp32-s3","link":"#hardware-wiring-esp32-s3","children":[]},{"level":3,"title":"Hardware Wiring - XIAOESP32S3","slug":"hardware-wiring-xiaoesp32s3","link":"#hardware-wiring-xiaoesp32s3","children":[]},{"level":3,"title":"Hardware Wiring - nodemcu32s","slug":"hardware-wiring-nodemcu32s","link":"#hardware-wiring-nodemcu32s","children":[]}]},{"level":2,"title":"Server","slug":"server","link":"#server","children":[{"level":3,"title":"Server Code - Node.js","slug":"server-code-node-js","link":"#server-code-node-js","children":[]},{"level":3,"title":"Docker Installation","slug":"docker-installation","link":"#docker-installation","children":[]},{"level":3,"title":"Lazy Package","slug":"lazy-package","link":"#lazy-package","children":[]}]},{"level":2,"title":"Detailed Documentation","slug":"detailed-documentation","link":"#detailed-documentation","children":[]},{"level":2,"title":"Finally","slug":"finally","link":"#finally","children":[]}],"git":{"updatedTime":1721909787000,"contributors":[{"name":"wangzongming","email":"wangzm@bjzxkj.com","commits":3}]},"filePathRelative":"en/start.md"}');export{S as comp,I as data};
