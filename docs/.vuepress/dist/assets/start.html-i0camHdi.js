import{_ as d,r as l,c,d as a,w as t,a as p,o,b as n,e as s}from"./app-ABaH--xM.js";const r={},u=p(`<h1 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h1><h2 id="esp-ai-是什么" tabindex="-1"><a class="header-anchor" href="#esp-ai-是什么"><span>ESP-AI 是什么？</span></a></h2><p><code>ESP-AI</code>为你的开发板提供全套的AI对话方案，包括但不限于 <code>ESP32</code> 系列开发板的 <code>IAT(ASR)+LLM+TTS</code> 集成方案。依赖式注入到项目，不影响现有项目。</p><p>为什么说包括但不限于<code>ESP32</code>开发板呢？因为即使你的另一块开发板使用的是其他开发板，你也可以用<code>ESP32</code>来基于本项目搭建<code>AI</code>服务，并且使用串口通信方式来将指令或者对话发送到你的另一块开发板。</p><h2 id="esp-ai-能做什么" tabindex="-1"><a class="header-anchor" href="#esp-ai-能做什么"><span>ESP-AI 能做什么？</span></a></h2><p>我们设想这样的一个场景，你手里有一个机器人，他可以做一些固定的动作，但是你想和它进行交流，并且让它可以理解你的一些指令。如果你要从零开始实现这套流程，那你讲会从收集麦克风的音频流开始，然后进入无休止的调试...</p><p>现在有了<code>ESP-AI</code>你大可不必这么做了，你只需要引入<code>ESP-AI</code>即可，对于<strong>离线语音唤醒、语音识别、大语言模型调用、文字转语音、喇叭输出音频</strong>等流程都已经帮你实现好了，而且<code>ESP-AI</code>使用插件式设计框架，上述中的每一个步骤都提供了扩展方法，让你可以随意定制你的产品。</p><h2 id="esp-ai-技术栈" tabindex="-1"><a class="header-anchor" href="#esp-ai-技术栈"><span>ESP-AI 技术栈</span></a></h2><ul><li><p><strong>在软件方面</strong>：本项目服务端代码基于 <code>Nodejs</code>，硬件代码基于 <code>Arduino</code>。服务端虽然基于<code>Nodejs</code>进行开发，但是也提供其他编程语言编写插件，详情见插件开发章节。</p></li><li><p><strong>在硬件方面</strong>：本项目主要基于<code>ESP</code>系列的开发板进行运行。</p></li></ul><h2 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h2><ul><li>✔️ 可定制的离线语音唤醒</li><li>✔️ IAT(ASR) ➡️ LLM/RAG ➡️ TTS</li><li>✔️ 配置化</li><li>✔️ 插件化</li><li>✔️ 开箱即用</li></ul><h2 id="下一步计划" tabindex="-1"><a class="header-anchor" href="#下一步计划"><span>下一步计划</span></a></h2><ul><li>🤔 提供无代码接入方案</li><li>🤔 用户意图推理过程加入AI（如： 帮我关灯、快开灯，都将识别为: &quot;开灯&quot; 指令）</li><li>🤔 提供免费服务与收费服务</li><li>🤔 唤醒词在线生成</li><li>🤔 其他语言编写插件的方法（避免只能使用nodejs进行开发插件）</li><li>🤔 提供专用开发板（避免当前的复杂接线）</li></ul><h2 id="开发环境准备" tabindex="-1"><a class="header-anchor" href="#开发环境准备"><span>开发环境准备</span></a></h2><h3 id="本地开发环境准备" tabindex="-1"><a class="header-anchor" href="#本地开发环境准备"><span>本地开发环境准备</span></a></h3><p>后续升级仅需在<a target="_block" href="https://github.com/wangzongming/esp-ai/releases">发布页面</a>下载相关文件即可，下面的依赖文件只是首次需要安装。</p><p>docker 镜像或者window懒人包安装服务端时不需要 <code>Nodejs</code> 环境。</p><table><thead><tr><th>环境</th><th>版本</th><th>备注</th></tr></thead><tbody><tr><td><code>Nodejs</code></td><td>&gt;= v18.x 建议18.x</td><td>npm版本需要低于10.x, 6.x到9.x都行</td></tr><tr><td><code>VsCode IDE</code></td><td>最新版</td><td></td></tr><tr><td><code>Arduino IDE</code></td><td>&gt;= v2.x</td><td></td></tr><tr><td><code>esp</code> 开发板</td><td>v2.x</td><td><code>Arduino IDE</code> 中搜索安装<code>esp</code>开发板</td></tr><tr><td>硬件代码依赖库</td><td>最新版</td><td>需将<code>Github</code> 仓库中 <code>/client/libraries</code> <br>中的插件导入到IDE插件中，<br>默认位置在<code>C:\\Users\\用户名\\Documents\\Arduino\\libraries</code></td></tr></tbody></table><h4 id="硬件代码依赖库说明" tabindex="-1"><a class="header-anchor" href="#硬件代码依赖库说明"><span>硬件代码依赖库说明</span></a></h4><table><thead><tr><th>文件名</th><th>备注</th><th>版本</th></tr></thead><tbody><tr><td>arduino-audio-tool</td><td>https://github.com/pschatzmann/arduino-audio-tools</td><td></td></tr><tr><td>WebSockets</td><td>新版IDE可以直接搜索安装</td><td>v2.4.0</td></tr><tr><td>Arduino_JSON</td><td>新版IDE可以直接搜索安装</td><td>v0.2.0</td></tr><tr><td>esp-ai</td><td>esp-ai 暂时不可搜索安装</td><td></td></tr><tr><td>xiao_ming_tong_xue_inferencing</td><td>离线语音识别模型 暂时不可搜索安装</td><td></td></tr></tbody></table><h3 id="讯飞-key-申请" tabindex="-1"><a class="header-anchor" href="#讯飞-key-申请"><span>讯飞 KEY 申请</span></a></h3><p>注册网址：https://console.xfyun.cn/services/iat</p><p><code>ESP-AI</code> 完整内置对接了讯飞的 <code>IAT</code>、<code>LLM</code>、<code>TTS</code> 服务，所以在开始用自己服务前可以先用讯飞的来测试。</p><h2 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端"><span>客户端</span></a></h2><p>硬件端这里成为客户端</p><h3 id="硬件代码-arduino" tabindex="-1"><a class="header-anchor" href="#硬件代码-arduino"><span>硬件代码 - Arduino</span></a></h3><ol><li>创建一个文件 <code>example/example.ino</code> ，注意：文件必须放到一个文件夹里，文件夹名字必须和文件一样</li><li>用 <code>Arduino IDE</code> 打开 <code>example.ino</code> 文件</li><li>写入下面代码，然后上传到开发板中</li></ol><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;esp-ai.h&gt;</span></span></span>
<span class="line"></span>
<span class="line">ESP_AI esp_ai<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [必  填] 是否调试模式， 会输出更多信息</span></span>
<span class="line">bool debug <span class="token operator">=</span> true<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [必  填] wifi 配置： { wifi 账号， wifi 密码 }  注意：要用双引号！</span></span>
<span class="line">ESP_AI_wifi_config wifi_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;oldwang&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;oldwang520&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [必  填] 服务配置： { 服务IP， 服务端口 }</span></span>
<span class="line">ESP_AI_server_config server_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;192.168.1.5&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [必  填] 离线唤醒方案：{ 方案, 识别阈值 }, &quot;edge_impulse&quot; | &quot;diy&quot;，为 &quot;diy&quot; 时可调用 esp_ai.wakeUp() 方法进行唤醒</span></span>
<span class="line">ESP_AI_wake_up_config wake_up_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;edge_impulse&quot;</span><span class="token punctuation">,</span> <span class="token number">0.7</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// [可留空] 麦克风引脚配置：{ bck_io_num, ws_io_num, data_in_num }</span></span>
<span class="line">ESP_AI_i2s_config_mic i2s_config_mic <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [可留空] 扬声器引脚配置：{ bck_io_num, ws_io_num, data_in_num, 采样率 }</span></span>
<span class="line">ESP_AI_i2s_config_speaker i2s_config_speaker <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16000</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [可留空] 音量调节配置：{ 输入引脚，输入最大值(1024|4096)，默认音量(0-1) }</span></span>
<span class="line">ESP_AI_volume_config volume_config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">,</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 开始运行 ESP-AI</span></span>
<span class="line">  esp_ai<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">{</span> i2s_config_mic<span class="token punctuation">,</span> i2s_config_speaker<span class="token punctuation">,</span> wifi_config<span class="token punctuation">,</span> server_config<span class="token punctuation">,</span> wake_up_config<span class="token punctuation">,</span> volume_config<span class="token punctuation">,</span> debug <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  esp_ai<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="硬件代码-idf" tabindex="-1"><a class="header-anchor" href="#硬件代码-idf"><span>硬件代码 - IDF</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre class="language-c"><code><span class="line"><span class="token comment">// 开发中 ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="硬件物料" tabindex="-1"><a class="header-anchor" href="#硬件物料"><span>硬件物料</span></a></h3><table><thead><tr><th>硬件</th><th>数量</th><th>价格</th></tr></thead><tbody><tr><td>esp32s3(N16R8)</td><td>1</td><td>25</td></tr><tr><td>INMP441</td><td>1</td><td>8</td></tr><tr><td>Max98357A</td><td>1</td><td>5</td></tr><tr><td>LED</td><td>1</td><td>0.5</td></tr><tr><td>小喇叭</td><td>1</td><td>6</td></tr><tr><td>面包板</td><td>1</td><td>5</td></tr><tr><td>杜邦线</td><td>若干</td><td>1</td></tr></tbody></table><h3 id="硬件接线-esp32-s3" tabindex="-1"><a class="header-anchor" href="#硬件接线-esp32-s3"><span>硬件接线 - ESP32-S3</span></a></h3><table><thead><tr><th>ESP32-s3</th><th>INMP441</th><th>Max98357A</th><th>电位器(可选)</th><th>LED(可选)</th></tr></thead><tbody><tr><td>3v3</td><td>VDD</td><td>VDD</td><td>VDD</td><td></td></tr><tr><td>GND</td><td>GND</td><td>GND</td><td>GND</td><td>GND</td></tr><tr><td>GND</td><td>L/R</td><td></td><td></td><td></td></tr><tr><td>4</td><td>SCK</td><td></td><td></td><td></td></tr><tr><td>5</td><td>WS</td><td></td><td></td><td></td></tr><tr><td>6</td><td>SD</td><td></td><td></td><td></td></tr><tr><td>15</td><td></td><td>DIN</td><td></td><td></td></tr><tr><td>16</td><td></td><td>BCLK</td><td></td><td></td></tr><tr><td>17</td><td></td><td>LRC</td><td></td><td></td></tr><tr><td>34/35</td><td></td><td></td><td>OUT</td><td></td></tr><tr><td>18</td><td></td><td></td><td></td><td>正极</td></tr></tbody></table><p>接线图待补充...</p><h3 id="硬件接线-xiaoesp32s3" tabindex="-1"><a class="header-anchor" href="#硬件接线-xiaoesp32s3"><span>硬件接线 - XIAOESP32S3</span></a></h3><p>开发中...</p><h3 id="硬件接线-nodemcu32s" tabindex="-1"><a class="header-anchor" href="#硬件接线-nodemcu32s"><span>硬件接线 - nodemcu32s</span></a></h3><p>开发中...</p><h2 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端"><span>服务端</span></a></h2><p>服务端用于向硬件(客户端)提供服务，用于调用 <code>LLM</code>、<code>IAT</code>、<code>TTS</code> 等服务，并且可以方便向外提供扩展等。 与客户端是一对多的关系，也就是说一台服务能够供多个客户端连接。</p><h3 id="服务端代码-node-js" tabindex="-1"><a class="header-anchor" href="#服务端代码-node-js"><span>服务端代码 - Node.js</span></a></h3><ol><li>继续在上面创建的 <code>example</code> 目录中创建一个文件 <code>index.js</code></li><li>在 <code>index.js</code> 中添加以下代码：</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> espAi <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;esp-ai&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token literal-property property">api_key</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 讯飞：https://console.xfyun.cn/services/iat  。打开网址后，右上角三个字段复制进来即可。</span></span>
<span class="line">        <span class="token literal-property property">xun_fei</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">appid</span><span class="token operator">:</span> <span class="token string">&quot;5200d300&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">apiSecret</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">apiKey</span><span class="token operator">:</span> <span class="token string">&quot;xx&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">llm</span><span class="token operator">:</span> <span class="token string">&quot;v4.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">espAi</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>安装服务端依赖</li></ol>`,45),h=n("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(" esp-ai")]),s(`
`),n("span",{class:"line"})])])],-1),k=n("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(" esp-ai")]),s(`
`),n("span",{class:"line"})])])],-1),m=n("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[n("pre",{class:"language-bash"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"install"),s(" esp-ai")]),s(`
`),n("span",{class:"line"})])])],-1),v=p(`<ol start="4"><li>运行服务</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line"># 生产环境中请使用 pm2 来运行服务以保证服务的可靠和性能： pm2 start ./index.js -i max </span>
<span class="line">node ./index.js</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-方式安装" tabindex="-1"><a class="header-anchor" href="#docker-方式安装"><span>Docker 方式安装</span></a></h3><p>实现中...</p><h3 id="懒人包" tabindex="-1"><a class="header-anchor" href="#懒人包"><span>懒人包</span></a></h3><p>实现中...</p><h2 id="详细文档" tabindex="-1"><a class="header-anchor" href="#详细文档"><span>详细文档</span></a></h2><ul><li><a href="client.html">客户端详细文档</a></li><li><a href="server.html">服务端端详细文档</a></li></ul><h2 id="最后" tabindex="-1"><a class="header-anchor" href="#最后"><span>最后</span></a></h2><p>大喊 <code>小明同学</code> 就可以愉快的和它聊天啦！🎉</p>`,10);function b(g,_){const e=l("CodeGroupItem"),i=l("CodeGroup");return o(),c("div",null,[u,a(i,null,{default:t(()=>[a(e,{title:"yarn"},{default:t(()=>[h]),_:1}),a(e,{title:"npm",active:""},{default:t(()=>[k]),_:1}),a(e,{title:"pnpm"},{default:t(()=>[m]),_:1})]),_:1}),v])}const x=d(r,[["render",b],["__file","start.html.vue"]]),S=JSON.parse('{"path":"/start.html","title":"快速开始","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"ESP-AI 是什么？","slug":"esp-ai-是什么","link":"#esp-ai-是什么","children":[]},{"level":2,"title":"ESP-AI 能做什么？","slug":"esp-ai-能做什么","link":"#esp-ai-能做什么","children":[]},{"level":2,"title":"ESP-AI 技术栈","slug":"esp-ai-技术栈","link":"#esp-ai-技术栈","children":[]},{"level":2,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":2,"title":"下一步计划","slug":"下一步计划","link":"#下一步计划","children":[]},{"level":2,"title":"开发环境准备","slug":"开发环境准备","link":"#开发环境准备","children":[{"level":3,"title":"本地开发环境准备","slug":"本地开发环境准备","link":"#本地开发环境准备","children":[]},{"level":3,"title":"讯飞 KEY 申请","slug":"讯飞-key-申请","link":"#讯飞-key-申请","children":[]}]},{"level":2,"title":"客户端","slug":"客户端","link":"#客户端","children":[{"level":3,"title":"硬件代码 - Arduino","slug":"硬件代码-arduino","link":"#硬件代码-arduino","children":[]},{"level":3,"title":"硬件代码 - IDF","slug":"硬件代码-idf","link":"#硬件代码-idf","children":[]},{"level":3,"title":"硬件物料","slug":"硬件物料","link":"#硬件物料","children":[]},{"level":3,"title":"硬件接线 - ESP32-S3","slug":"硬件接线-esp32-s3","link":"#硬件接线-esp32-s3","children":[]},{"level":3,"title":"硬件接线 - XIAOESP32S3","slug":"硬件接线-xiaoesp32s3","link":"#硬件接线-xiaoesp32s3","children":[]},{"level":3,"title":"硬件接线 - nodemcu32s","slug":"硬件接线-nodemcu32s","link":"#硬件接线-nodemcu32s","children":[]}]},{"level":2,"title":"服务端","slug":"服务端","link":"#服务端","children":[{"level":3,"title":"服务端代码 - Node.js","slug":"服务端代码-node-js","link":"#服务端代码-node-js","children":[]},{"level":3,"title":"Docker 方式安装","slug":"docker-方式安装","link":"#docker-方式安装","children":[]},{"level":3,"title":"懒人包","slug":"懒人包","link":"#懒人包","children":[]}]},{"level":2,"title":"详细文档","slug":"详细文档","link":"#详细文档","children":[]},{"level":2,"title":"最后","slug":"最后","link":"#最后","children":[]}],"git":{"updatedTime":1721909787000,"contributors":[{"name":"wangzongming","email":"wangzm@bjzxkj.com","commits":3}]},"filePathRelative":"start.md"}');export{x as comp,S as data};
