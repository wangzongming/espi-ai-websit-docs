import{_ as n,c as s,o as a,a as p}from"./app-C4qcx3IG.js";const t={},e=p(`<h1 id="插件开发" tabindex="-1"><a class="header-anchor" href="#插件开发"><span>插件开发</span></a></h1><p>当需要使用内部或者本地的大语言模型或者语音服务等，这时候就需要自己开发专用的插件了。</p><p>插件分为了 <code>LLM</code> | <code>TTS</code> | <code>IAT</code> 三种类型。每种插件都会有接受到框架提供的不同形参，然后调用参数的方法与框架进行通信。</p><h2 id="必读规约" tabindex="-1"><a class="header-anchor" href="#必读规约"><span>必读规约</span></a></h2><ol><li>LLM 插件名称必须是 <code>esp-ai-plugin-llm-xxx</code> 形式</li><li>TTS 插件名称必须是 <code>esp-ai-plugin-tts-xxx</code> 形式</li><li>IAT 插件名称必须是 <code>esp-ai-plugin-iat-xxx</code> 形式</li><li>要对外发布的插件，必须在插件目录的<code>package.json</code>增加下面关键词，否则不会被自动收录。</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esp-ai-plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esp-ai-plugin-llm&quot;</span><span class="token punctuation">]</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="上手指南" tabindex="-1"><a class="header-anchor" href="#上手指南"><span>上手指南</span></a></h2><p>LLM | TTS | IAT 插件的基本结构都如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;esp-ai-plugin-llm-test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 插件名称  </span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span><span class="token comment">// 插件类型 LLM | TTS | IAT</span></span>
<span class="line">            <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 插件逻辑</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了代码规范当然不能直接写到 plugins 数组中。所以我们正常的一个插件创建步骤如下：</p><ol><li>创建插件文件夹 <code>esp-ai-plugin-llm-test</code></li><li>增加 <code>package.json</code> 文件</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-llm-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esp-ai-plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esp-ai-plugin-llm&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESP-AI LLM Plugin Example | ESP-AI LLM 插件开发案例&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>增加 <code>index.js</code> 文件, 并进行自己的逻辑编写</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;esp-ai-plugin-llm-test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 插件名称  </span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span><span class="token comment">// 插件类型 LLM | TTS | IAT</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 插件逻辑</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>发布到 <code>npm</code>， 私有插件这一步省略</li></ol><p>需自行网上查找一下发布教程。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">npm publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="5"><li>插件收录 插件发布到 <code>npm</code> 之后，框架会自动进行收录，其他用户使用关键词在 <code>npm</code> 进行搜索。或者在<code>ESP-AI</code> 插件市场可以直接看到。</li></ol><h2 id="llm-插件" tabindex="-1"><a class="header-anchor" href="#llm-插件"><span>LLM 插件</span></a></h2><p>下面提供演示代码，自行根据业务进行修改即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai LLM 插件开发</span>
<span class="line"> * </span>
<span class="line"> * 演示请求流式返回的 LLM 服务</span>
<span class="line">*/</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 插件名字</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-llm-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 插件类型 LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 大语言模型插件</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           设备id </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">devLog</span>              日志输出等级，为0时不应该输出任何日志   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             用户配置的key   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">text</span>                对话文本</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">cb</span>                  LLM 服务返回音频数据时调用，eg: cb(<span class="token punctuation">{</span> text, texts <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">llmServerErrorCb</span>    与 LLM 服务之间发生错误时调用，并且传入错误说明，eg: llmServerErrorCb(&quot;意外错误&quot;)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">llm_params_set</span>      用户配置的设置 LLM 参数的函数</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         将 ws 服务回传给框架，如果不是ws服务可以这么写: logWSServer(<span class="token punctuation">{</span> close: ()=&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> content<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>  <span class="token parameter">llm_init_messages</span>   用户配置的初始化时的对话数据</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> content<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>  <span class="token parameter">llm_historys</span>        llm 历史对话数据</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 为保证日志输出的一致性，请使用 log 对象进行日志输出，eg: log.error(&quot;错误信息&quot;)、log.info(&quot;普通信息&quot;)、log.llm_info(&quot;llm 专属信息&quot;)</span>
<span class="line">     *  </span>
<span class="line">    */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> devLog<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> llmServerErrorCb<span class="token punctuation">,</span> llm_init_messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> llm_historys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> llm_params_set<span class="token punctuation">,</span> logWSServer <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        devLog <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;对话记录：\\n&quot;</span><span class="token punctuation">,</span> llm_historys<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 请自行约定接口 key 需要配置什么字段</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 连接 ws 服务后并且上报给框架</span></span>
<span class="line">        <span class="token comment">// const llm_ws = new WebSocket(&quot;ws://xxx&quot;);</span></span>
<span class="line">        <span class="token comment">// logWSServer(llm_ws)</span></span>
<span class="line"></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 这个变量是固定写法，需要回传给 cb()</span>
<span class="line">         * 具体需要怎么更改见下面逻辑</span>
<span class="line">        */</span></span>
<span class="line">        <span class="token keyword">const</span> texts <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">all_text</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">count_text</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 模拟服务返回的数据</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">moniServer</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> moni_data <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token string">&quot;你好,&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;有什么我可以帮您的？&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;请尽管吩咐！&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">function</span> <span class="token function">reData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> res_text <span class="token operator">=</span> moni_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">cb</span><span class="token punctuation">(</span>res_text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> moni_data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                moni_data<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reData<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">reData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 请求llm服务的参数, 将对话信息给到参数中</span></span>
<span class="line">        <span class="token keyword">const</span> r_params <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;model&quot;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>llm<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token operator">...</span>llm_init_messages<span class="token punctuation">,</span></span>
<span class="line">                <span class="token operator">...</span>llm_historys<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> text</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 根据接口需求自行给接口</span></span>
<span class="line">        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>llm_params_set <span class="token operator">?</span> <span class="token function">llm_params_set</span><span class="token punctuation">(</span>r_params<span class="token punctuation">)</span> <span class="token operator">:</span> r_params<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">moniServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunk_text<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            devLog <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;LLM 输出 ：&#39;</span><span class="token punctuation">,</span> chunk_text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            texts<span class="token punctuation">[</span><span class="token string">&quot;count_text&quot;</span><span class="token punctuation">]</span> <span class="token operator">+=</span> chunk_text<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> texts<span class="token punctuation">,</span> <span class="token literal-property property">is_over</span><span class="token operator">:</span> length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tts-插件" tabindex="-1"><a class="header-anchor" href="#tts-插件"><span>TTS 插件</span></a></h2><p>下面提供演示代码，自行根据业务进行修改即可。</p><p>由于海豚配音不是流式返回的，所以代码中先获取完整的音频数据，然后再返回流数据到客户端。这是一个不错的实践案例，如<code>LLM</code>、<code>IAT</code>等服务也不是返回流式的，也可以参照这个案例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> PassThrough <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">wavUrlToStream</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PassThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    https<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Request failed with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> stream<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai TTS 插件开发</span>
<span class="line"> * </span>
<span class="line"> * 演示请求海豚配音服务，并且流式返回到客户端</span>
<span class="line">*/</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 插件名字</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-tts-ttson&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 插件类型 LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;TTS&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * TTS 插件封装 </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           设备ID   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">text</span>                待播报的文本   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             用户配置的key   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">devLog</span>              日志输出等级，为0时不应该输出任何日志   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">tts_params_set</span>      用户自定义传输给 TTS 服务的参数，eg: tts_params_set(参数体)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         将 ws 服务回传给框架，如果不是ws服务可以这么写: logWSServer(<span class="token punctuation">{</span> close: ()=&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">ttsServerErrorCb</span>    与 TTS 服务之间发生错误时调用，并且传入错误说明，eg: ttsServerErrorCb(&quot;意外错误&quot;)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">cb</span>                  TTS 服务返回音频数据时调用，eg: cb(<span class="token punctuation">{</span> audio: 音频base64, ... <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 为保证日志输出的一致性，请使用 log 对象进行日志输出，eg: log.error(&quot;错误信息&quot;)、log.info(&quot;普通信息&quot;)、log.tts_info(&quot;tts 专属信息&quot;)</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> text<span class="token punctuation">,</span> devLog<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> logWSServer<span class="token punctuation">,</span> tts_params_set<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> log<span class="token punctuation">,</span> ttsServerErrorCb <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://u95167-bd74-2aef8085.westx.seetacloud.com:8443/flashsummary/tts?token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">&quot;ZH&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-zA-Z]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            language <span class="token operator">=</span> <span class="token string">&quot;auto&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> _payload <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">voice_id</span><span class="token operator">:</span> <span class="token number">1683</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">text</span><span class="token operator">:</span> text<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;wav&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">to_lang</span><span class="token operator">:</span> language<span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">auto_translate</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">voice_speed</span><span class="token operator">:</span> <span class="token string">&quot;0%&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">speed_factor</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">rate</span><span class="token operator">:</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">client_ip</span><span class="token operator">:</span> <span class="token string">&quot;ACGN&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">emotion</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">volume_change_dB</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">zip_level</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment">// 16k</span></span>
<span class="line">            <span class="token comment">// zip_level: 5, // 24k</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tts_params_set <span class="token operator">?</span> <span class="token function">tts_params_set</span><span class="token punctuation">(</span>_payload<span class="token punctuation">)</span> <span class="token operator">:</span> _payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&#39;User-Agent&#39;</span><span class="token operator">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36&#39;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> <span class="token function-variable function">getAR</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> req <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                        data <span class="token operator">+=</span> chunk<span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                            <span class="token keyword">const</span> responseJson <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>responseJson<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>responseJson<span class="token punctuation">.</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/flashsummary/retrieveFileData?stream=True&amp;token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&amp;voice_audio_path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>responseJson<span class="token punctuation">.</span>voice_path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Error fetching audio URL: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>e<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">            <span class="token keyword">const</span> ar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getAR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>ar<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// devLog &amp;&amp; log.tts_info(&quot;音频地址：&quot;, ar);</span></span>
<span class="line"> </span>
<span class="line">                <span class="token keyword">const</span> wavStream <span class="token operator">=</span> <span class="token function">wavUrlToStream</span><span class="token punctuation">(</span>ar<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">logWSServer</span><span class="token punctuation">(</span>wavStream<span class="token punctuation">)</span></span>
<span class="line"> </span>
<span class="line"></span>
<span class="line">                devLog <span class="token operator">&amp;&amp;</span> log<span class="token punctuation">.</span><span class="token function">tts_info</span><span class="token punctuation">(</span><span class="token string">&quot;-&gt; tts服务连接成功！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                wavStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// log.tts_info(\`Received \${chunk.length} bytes of data.\`);</span></span>
<span class="line">                    <span class="token comment">//     let audioBuf = Buffer.from(audio, &#39;base64&#39;)</span></span>
<span class="line">                    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 根据服务控制</span></span>
<span class="line">                        <span class="token literal-property property">is_over</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token literal-property property">audio</span><span class="token operator">:</span> chunk<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">                        <span class="token comment">// 固定写法</span></span>
<span class="line">                        <span class="token literal-property property">resolve</span><span class="token operator">:</span> resolve<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token literal-property property">ws</span><span class="token operator">:</span> wavStream</span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                wavStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> </span>
<span class="line">                    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">                        <span class="token comment">// 根据服务控制</span></span>
<span class="line">                        <span class="token literal-property property">is_over</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                        <span class="token comment">// 固定写法</span></span>
<span class="line">                        <span class="token literal-property property">resolve</span><span class="token operator">:</span> resolve<span class="token punctuation">,</span></span>
<span class="line">                        <span class="token literal-property property">ws</span><span class="token operator">:</span> wavStream</span>
<span class="line">                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                wavStream<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Stream error: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>err<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> </span>
<span class="line">                curTTSWs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">ttsServerErrorCb</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">tts错误 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>res<span class="token punctuation">.</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> </span>
<span class="line">                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iat-插件" tabindex="-1"><a class="header-anchor" href="#iat-插件"><span>IAT 插件</span></a></h2><p>下面提供演示代码，自行根据业务进行修改即可。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai IAT 插件开发 </span>
<span class="line">*/</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 插件名字</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-iat-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 插件类型 LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;IAT&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 语音识别插件  </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           设备ID    </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">devLog</span>              日志输出等级，为0时不应该输出任何日志   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             用户配置的key   </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">vad_eos</span>             用户配置的静默时间，超过这个时间不说话就结束语音识别  </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         将 ws 服务回传给框架，如果不是ws服务可以这么写: logWSServer(<span class="token punctuation">{</span> close: ()=&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">iatServerErrorCb</span>    与 TTS 服务之间发生错误时调用，并且传入错误说明，eg: ttsServerErrorCb(&quot;意外错误&quot;) </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">cb</span>                  IAT 识别的结果调用这个方法回传给框架 eg: cb(<span class="token punctuation">{</span> text: &quot;我是语音识别结果&quot;  <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logSendAudio</span>        记录发送音频数据给服务的函数，框架在合适的情况下会进行调用</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">connectServerCb</span>     连接 iat 服务后需要调用这个方法告诉框架：eg: connectServerCb(true)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">serverTimeOutCb</span>     当 IAT 服务连接成功了，但是长时间不响应时</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">iatEndQueueCb</span>       iat 静默时间达到后触发， 一般在这里面进行最后一帧的发送，告诉服务端结束识别 </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 为保证日志输出的一致性，请使用 log 对象进行日志输出，eg: log.error(&quot;错误信息&quot;)、log.info(&quot;普通信息&quot;)、log.iat_info(&quot;iat 专属信息&quot;)</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> log<span class="token punctuation">,</span> devLog<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> vad_eos<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> iatServerErrorCb<span class="token punctuation">,</span> logWSServer<span class="token punctuation">,</span> logSendAudio<span class="token punctuation">,</span> connectServerCb<span class="token punctuation">,</span> serverTimeOutCb<span class="token punctuation">,</span> iatEndQueueCb <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// // 连接 ws 服务后并且上报给框架</span></span>
<span class="line">        <span class="token comment">// const iat_ws = new WebSocket(&quot;ws:/xxx&quot;)</span></span>
<span class="line">        <span class="token comment">// logWSServer(iat_ws);</span></span>
<span class="line">        <span class="token comment">// iat_ws.on(&#39;open&#39;, (event) =&gt; {</span></span>
<span class="line">        <span class="token comment">//     // 服务连接成功后必须调用这个方法</span></span>
<span class="line">        <span class="token comment">//     connectServerCb(true);</span></span>
<span class="line">        <span class="token comment">// })</span></span>
<span class="line">        <span class="token comment">// iat_ws.on(&#39;close&#39;, () =&gt; {</span></span>
<span class="line">        <span class="token comment">//     // 关闭或者意外断开时也必须调用这个方法</span></span>
<span class="line">        <span class="token comment">//     connectServerCb(false);</span></span>
<span class="line">        <span class="token comment">// })</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// // 建连错误</span></span>
<span class="line">        <span class="token comment">// iat_ws.on(&#39;error&#39;, (err) =&gt; { </span></span>
<span class="line">        <span class="token comment">//     // 必须调用下面两个方法</span></span>
<span class="line">        <span class="token comment">//     iatServerErrorCb(err);</span></span>
<span class="line">        <span class="token comment">//     connectServerCb(false);</span></span>
<span class="line">        <span class="token comment">// })</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 当达到静默时间后会自动执行这个任务</span></span>
<span class="line">        <span class="token function">iatEndQueueCb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 比如发送最后一帧数据等...</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * 函数回到中可以收到客户端采集到的 pcm 音频：单通道/16khz </span>
<span class="line">        */</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">send_pcm</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token punctuation">{</span> iat_server_connected <span class="token punctuation">}</span> <span class="token operator">=</span> G_devices<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>device_id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>iat_server_connected<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment">// 要发送给服务器的参数</span></span>
<span class="line">            <span class="token keyword">let</span> frameDataSection <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token comment">// 这里的帧率一定要和 inmp441 终端对上</span></span>
<span class="line">                <span class="token string-property property">&quot;format&quot;</span><span class="token operator">:</span> <span class="token string">&quot;audio/L16;rate=16000&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;audio&quot;</span><span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&quot;encoding&quot;</span><span class="token operator">:</span> <span class="token string">&quot;raw&quot;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token comment">// 发送给服务器的请求... </span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;PCM:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 必须将这个函数传给框架，当硬件采集到音频数据后，会调用这个函数</span></span>
<span class="line">        <span class="token function">logSendAudio</span><span class="token punctuation">(</span>send_pcm<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 不管逻辑怎么写，语音识别完毕都都只需要执行 cb 即可</span></span>
<span class="line">            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&quot;帮我写一首小诗&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="意图识别插件" tabindex="-1"><a class="header-anchor" href="#意图识别插件"><span>意图识别插件</span></a></h2><p>文档待补充...</p><h2 id="音乐播放插件" tabindex="-1"><a class="header-anchor" href="#音乐播放插件"><span>音乐播放插件</span></a></h2><p>文档待补充...</p>`,32),l=[e];function o(c,i){return a(),s("div",null,l)}const r=n(t,[["render",o],["__file","plugs-develop.html.vue"]]),k=JSON.parse('{"path":"/plugs-develop.html","title":"插件开发","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"必读规约","slug":"必读规约","link":"#必读规约","children":[]},{"level":2,"title":"上手指南","slug":"上手指南","link":"#上手指南","children":[]},{"level":2,"title":"LLM 插件","slug":"llm-插件","link":"#llm-插件","children":[]},{"level":2,"title":"TTS 插件","slug":"tts-插件","link":"#tts-插件","children":[]},{"level":2,"title":"IAT 插件","slug":"iat-插件","link":"#iat-插件","children":[]},{"level":2,"title":"意图识别插件","slug":"意图识别插件","link":"#意图识别插件","children":[]},{"level":2,"title":"音乐播放插件","slug":"音乐播放插件","link":"#音乐播放插件","children":[]}],"git":{"updatedTime":1722236477000,"contributors":[{"name":"wangzongming","email":"wangzm@bjzxkj.com","commits":2}]},"filePathRelative":"plugs-develop.md"}');export{r as comp,k as data};
