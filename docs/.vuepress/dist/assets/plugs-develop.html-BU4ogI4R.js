import{_ as n,c as s,o as a,a as p}from"./app-CPBFrnNr.js";const t={},e=p(`<h1 id="plugin-development" tabindex="-1"><a class="header-anchor" href="#plugin-development"><span>Plugin Development</span></a></h1><p>When you need to use internal or local large language models or speech services, you will need to develop specialized plugins.</p><p>There are three types of plugins: <code>LLM</code>, <code>TTS</code>, and <code>IAT</code>. Each type of plugin will receive different parameters provided by the framework and will communicate with the framework by invoking methods with these parameters.</p><h2 id="required-conventions" tabindex="-1"><a class="header-anchor" href="#required-conventions"><span>Required Conventions</span></a></h2><ol><li>LLM plugin names must be in the format <code>esp-ai-plugin-llm-xxx</code>.</li><li>TTS plugin names must be in the format <code>esp-ai-plugin-tts-xxx</code>.</li><li>IAT plugin names must be in the format <code>esp-ai-plugin-iat-xxx</code>.</li><li>For plugins to be published externally, the following keywords must be added to the <code>package.json</code> in the plugin directory, otherwise, they will not be automatically included.</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esp-ai-plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esp-ai-plugin-llm&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="getting-started-guide" tabindex="-1"><a class="header-anchor" href="#getting-started-guide"><span>Getting Started Guide</span></a></h2><p>The basic structure of LLM, TTS, and IAT plugins is as follows:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;esp-ai-plugin-llm-test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Plugin name  </span></span>
<span class="line">            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Plugin type: LLM | TTS | IAT</span></span>
<span class="line">            <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// Plugin logic</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">     <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To maintain code standards, it is of course not directly written into the plugins array. Therefore, the normal steps to create a plugin are as follows:</p><ol><li>Create a plugin folder <code>esp-ai-plugin-llm-test</code>.</li><li>Add a <code>package.json</code> file.</li></ol><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-llm-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;esp-ai-plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;esp-ai-plugin-llm&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ESP-AI LLM Plugin Example | ESP-AI LLM Plugin Development Example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;index.js&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>Add an <code>index.js</code> file and write your logic.</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;esp-ai-plugin-llm-test&#39;</span><span class="token punctuation">,</span> <span class="token comment">// Plugin name  </span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Plugin type: LLM | TTS | IAT</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Plugin logic</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>Publish to <code>npm</code> (skip this step for private plugins).</li></ol><p>You can find publishing tutorials online.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre class="language-text"><code><span class="line">npm publish</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="5"><li>Plugin Inclusion</li></ol><p>After the plugin is published to <code>npm</code>, the framework will automatically include it, and other users can search for it using keywords on <code>npm</code>, or see it directly in the <code>ESP-AI</code> plugin marketplace.</p><h2 id="llm-plugin" tabindex="-1"><a class="header-anchor" href="#llm-plugin"><span>LLM Plugin</span></a></h2><p>Here is a sample code for the LLM plugin, which you can modify based on your business needs.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai LLM Plugin Development</span>
<span class="line"> * </span>
<span class="line"> * Demonstrates requesting a streaming LLM service</span>
<span class="line"> */</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Plugin name</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-llm-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Plugin type: LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;LLM&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Large Language Model Plugin</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           Device ID </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">devLog</span>              Log output level; no logs should be output when it is 0</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             User-configured key</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">text</span>                Dialog text</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">cb</span>                  Called when the LLM service returns audio data, e.g., cb(<span class="token punctuation">{</span> text, texts <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">llmServerErrorCb</span>    Called when an error occurs between the LLM service, with an error description, e.g., llmServerErrorCb(&quot;Unexpected error&quot;)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">llm_params_set</span>      Function to set LLM parameters configured by the user</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         Passes the ws service back to the framework; if not a ws service, can write: logWSServer(<span class="token punctuation">{</span> close: () =&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> content<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>  <span class="token parameter">llm_init_messages</span>   Initial dialog data configured by the user</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span><span class="token punctuation">{</span>role<span class="token punctuation">,</span> content<span class="token punctuation">}</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span>  <span class="token parameter">llm_historys</span>        LLM dialog history data</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 To ensure consistent log output, please use the log object for log output, e.g., log.error(&quot;Error message&quot;), log.info(&quot;General information&quot;), log.llm_info(&quot;LLM-specific information&quot;)</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> devLog<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> text<span class="token punctuation">,</span> llmServerErrorCb<span class="token punctuation">,</span> llm_init_messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> llm_historys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cb<span class="token punctuation">,</span> llm_params_set<span class="token punctuation">,</span> logWSServer <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        devLog <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Dialog history:\\n&quot;</span><span class="token punctuation">,</span> llm_historys<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Please define what fields the api_key needs to configure</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Connect the ws service and report it to the framework</span></span>
<span class="line">        <span class="token comment">// const llm_ws = new WebSocket(&quot;ws://xxx&quot;);</span></span>
<span class="line">        <span class="token comment">// logWSServer(llm_ws);</span></span>
<span class="line"></span>
<span class="line">        <span class="token doc-comment comment">/**</span>
<span class="line">         * This variable is fixed and needs to be passed back to cb()</span>
<span class="line">         * See the logic below for specific changes</span>
<span class="line">         */</span></span>
<span class="line">        <span class="token keyword">const</span> texts <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">all_text</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">count_text</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Simulate data returned by the service</span></span>
<span class="line">        <span class="token keyword">function</span> <span class="token function">moniServer</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> moni_data <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token string">&quot;Hello,&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;How can I help you?&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;Please feel free to ask!&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">function</span> <span class="token function">reData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">const</span> res_text <span class="token operator">=</span> moni_data<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token function">cb</span><span class="token punctuation">(</span>res_text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> moni_data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                moni_data<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>reData<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token function">reData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Parameters for requesting the LLM service, including dialog information</span></span>
<span class="line">        <span class="token keyword">const</span> r_params <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;model&quot;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>llm<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;messages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">                <span class="token operator">...</span>llm_init_messages<span class="token punctuation">,</span></span>
<span class="line">                <span class="token operator">...</span>llm_historys<span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string-property property">&quot;role&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;content&quot;</span><span class="token operator">:</span> text</span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// Adjust the request based on the API requirements</span></span>
<span class="line">        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>llm_params_set <span class="token operator">?</span> <span class="token function">llm_params_set</span><span class="token punctuation">(</span>r_params<span class="token punctuation">)</span> <span class="token operator">:</span> r_params<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">moniServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">chunk_text<span class="token punctuation">,</span> length</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            devLog <span class="token operator">&amp;&amp;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;LLM output:&#39;</span><span class="token punctuation">,</span> chunk_text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            texts<span class="token punctuation">[</span><span class="token string">&quot;count_text&quot;</span><span class="token punctuation">]</span> <span class="token operator">+=</span> chunk_text<span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">{</span> text<span class="token punctuation">,</span> texts<span class="token punctuation">,</span> <span class="token literal-property property">is_over</span><span class="token operator">:</span> length <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tts-plugin" tabindex="-1"><a class="header-anchor" href="#tts-plugin"><span>TTS Plugin</span></a></h2><p>Here is a sample code for the TTS plugin, which you can modify based on your business needs.</p><p>Because Dolphin dubbing does not return data in a streaming format, the code first gets the complete audio data and then returns the stream data to the client. This is a good practice case, and services like <code>LLM</code> and <code>IAT</code> that do not return streaming data can also refer to this example.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> PassThrough <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">wavUrlToStream</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> stream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PassThrough</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    https<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusCode <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Request failed with status code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>response<span class="token punctuation">.</span>statusCode<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        stream<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> stream<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai TTS Plugin Development</span>
<span class="line"> * </span>
<span class="line"> * Demonstrates requesting Dolphin dubbing service and streaming the response to the client</span>
<span class="line"> */</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Plugin name</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-tts-ttson&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Plugin type: LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;TTS&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * TTS Plugin encapsulation </span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           Device ID</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">text</span>                Text to be broadcast</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             User-configured key</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Number<span class="token punctuation">}</span></span>      <span class="token parameter">devLog</span>              Log output level; no logs should be output when it is 0</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">tts_params_set</span>      Function to set parameters passed to the TTS service, e.g., tts_params_set(params)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         Passes the ws service back to the framework; if not a ws service, can write: logWSServer(<span class="token punctuation">{</span> close: () =&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">ttsServerErrorCb</span>    Called when an error occurs between the TTS service, with an error description, e.g., ttsServerErrorCb(&quot;Unexpected error&quot;)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">cb</span>                  Called when the TTS service returns audio data, e.g., cb(<span class="token punctuation">{</span> audio: audioBase64, ... <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 To ensure consistent log output, please use the log object for log output, e.g., log.error(&quot;Error message&quot;), log.info(&quot;General information&quot;), log.tts_info(&quot;TTS-specific information&quot;)</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> text<span class="token punctuation">,</span> devLog<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> logWSServer<span class="token punctuation">,</span> tts_params_set<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> log<span class="token punctuation">,</span> ttsServerErrorCb <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">https://u95167-bd74-2aef8085.westx.seetacloud.com:8443/flashsummary/tts?token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>config<span class="token punctuation">.</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">let</span> language <span class="token operator">=</span></span>
<span class="line"></span>
<span class="line"> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\u4e00-\\u9fa5]</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            language <span class="token operator">=</span> <span class="token string">&quot;zh&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            language <span class="token operator">=</span> <span class="token string">&quot;en&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string-property property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;language&quot;</span><span class="token operator">:</span> language<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;voice&quot;</span><span class="token operator">:</span> <span class="token string">&quot;siyue&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string-property property">&quot;text&quot;</span><span class="token operator">:</span> text<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> requestBody <span class="token operator">=</span> tts_params_set <span class="token operator">?</span> <span class="token function">tts_params_set</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> body <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token string-property property">&#39;Content-Length&#39;</span><span class="token operator">:</span> body<span class="token punctuation">.</span>length<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> req <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">let</span> rawData <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">&#39;utf8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> rawData <span class="token operator">+=</span> chunk<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">const</span> parsedData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>rawData<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parsedData <span class="token operator">&amp;&amp;</span> parsedData<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token string">&#39;200&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token function">ttsServerErrorCb</span><span class="token punctuation">(</span>parsedData<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                        <span class="token keyword">const</span> audioStream <span class="token operator">=</span> <span class="token function">wavUrlToStream</span><span class="token punctuation">(</span>parsedData<span class="token punctuation">.</span>audio<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                        <span class="token function">logWSServer</span><span class="token punctuation">(</span>audioStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token function">ttsServerErrorCb</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">ttsServerErrorCb</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iat-plugin" tabindex="-1"><a class="header-anchor" href="#iat-plugin"><span>IAT Plugin</span></a></h2><p>Here is a sample code for the IAT plugin, which you can modify based on your business needs.</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * esp-ai IAT Plugin Development</span>
<span class="line"> * </span>
<span class="line"> * Demonstrates connecting to a WebSocket-based IAT service</span>
<span class="line"> */</span></span>
<span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Plugin name</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;esp-ai-plugin-iat-example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// Plugin type: LLM | TTS | IAT</span></span>
<span class="line">    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&quot;IAT&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * IAT Plugin encapsulation</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>String<span class="token punctuation">}</span></span>      <span class="token parameter">device_id</span>           Device ID</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Object<span class="token punctuation">}</span></span>      <span class="token parameter">api_key</span>             User-configured key</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">logWSServer</span>         Passes the ws service back to the framework; if not a ws service, can write: logWSServer(<span class="token punctuation">{</span> close: () =&gt; <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>Function<span class="token punctuation">}</span></span>    <span class="token parameter">log</span>                 To ensure consistent log output, please use the log object for log output, e.g., log.error(&quot;Error message&quot;), log.info(&quot;General information&quot;), log.iat_info(&quot;IAT-specific information&quot;)</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token function">main</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> api_key<span class="token punctuation">,</span> logWSServer<span class="token punctuation">,</span> log <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>api_key <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">const</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">&quot;ws://example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">iat_info</span><span class="token punctuation">(</span><span class="token string">&#39;connected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> device_id<span class="token punctuation">,</span> config <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">iat_info</span><span class="token punctuation">(</span><span class="token string">&#39;received: %s&#39;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">iat_info</span><span class="token punctuation">(</span><span class="token string">&#39;disconnected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error: %s&#39;</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">logWSServer</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[e];function l(c,i){return a(),s("div",null,o)}const r=n(t,[["render",l],["__file","plugs-develop.html.vue"]]),k=JSON.parse('{"path":"/en/plugs-develop.html","title":"Plugin Development","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Required Conventions","slug":"required-conventions","link":"#required-conventions","children":[]},{"level":2,"title":"Getting Started Guide","slug":"getting-started-guide","link":"#getting-started-guide","children":[]},{"level":2,"title":"LLM Plugin","slug":"llm-plugin","link":"#llm-plugin","children":[]},{"level":2,"title":"TTS Plugin","slug":"tts-plugin","link":"#tts-plugin","children":[]},{"level":2,"title":"IAT Plugin","slug":"iat-plugin","link":"#iat-plugin","children":[]}],"git":{"updatedTime":1721455615000,"contributors":[{"name":"wangzongming","email":"wangzm@bjzxkj.com","commits":1}]},"filePathRelative":"en/plugs-develop.md"}');export{r as comp,k as data};
